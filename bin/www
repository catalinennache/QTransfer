#!/usr/bin/env node

/**
 * Module dependencies.
 */

global.cryptok = require('../tools/CryptoK');

var mysql = require('mysql');
global.sql_connection = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "",
  database:"qtransfer"
});

global.sql_connection.connect(function(err) {
  if (err) throw err;

    var app = require('../app');
    var debug = require('debug')('quicktransfer:server');
    var http = require('http');
    var WebSocket = require('ws');

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3001');
    app.set('port', port);

    /**
     * Create HTTP server.
     */



    var server = http.createServer(app);
    
    const wss = new WebSocket.Server({server});
    var connected_peers = {};
    wss.on('connection', (ws) => {
      
   
      ws.on('message', (message) => {
       // console.log(message);
        try{
           message = JSON.parse(message); 
          if(message.type === 'register'){
            connected_peers[message.value] = ws;
            console.log(message,"registered");
          }

          if(message.type === "agc"){            
            if(connected_peers[message.value]){
              connected_peers[message.value].send(JSON.stringify({type:'unregister'}));
              console.log("Unregister evt sent");
            }
          }
        } catch(e){} //console.log(e)}
       });

      //vulnerability?
      ws.on('register',(asession_id)=>{
        connected_peers[asession_id] = ws;
      });
      //-------------

    
  
      //send immediatly a feedback to the incoming connection    
      ws.send('200');
    });

    wss.on('close',(ws)=>{
       Object.keys(connected_peers).forEach(key=>{
          if(connected_peers[key]==ws){
            connected_peers[key] = undefined;
          }
       });
    });

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);


    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
      var port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }

});